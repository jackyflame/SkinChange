apply plugin: 'com.android.application'

android {
    def versions = rootProject.ext.versions
    compileSdkVersion versions.compileSdkVersion

    defaultConfig {
        applicationId versions.applicationId
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.targetSdkVersion
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14"
                //abiFilters "armeabi-v7a"
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("../skin.jks")
            storePassword "666666"
            keyAlias "skin"
            keyPassword "666666"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'blue'

    productFlavors {
        SKIN_ALL {
            "applicationId" "com.jf.skinfull"
            "versionName" "1.0.a"
            manifestPlaceholders = [APP_NAME: "Skiner 完全版"]
            buildConfigField("String", "HOST", "\"http://www.jf.skinall\"")
            buildConfigField("boolean", "isTest", "false")
        }

        SKIN_MODULE {
            "applicationId" "com.jf.skinmodule"
            "versionName" "1.0.m"
            manifestPlaceholders = [APP_NAME: "Skiner 分离版"]
            buildConfigField("String", "HOST", "\"http://www.jf.skinmodule\"")
            buildConfigField("boolean", "isTest", "true")
        }
    }

    //自定义输出配置
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "APP_${versions.versionName}[${versions.versionCode}].apk"
        }
    }

    dataBinding {
        enabled = true
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    def deps = rootProject.ext.deps
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.suport.appcompat
    implementation deps.suport.constraintlayout
    implementation deps.suport.lifecycle
    testImplementation 'junit:junit:4.13-beta-3'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    implementation project(path: ':ModelA')
    implementation project(path: ':ModelB')
    implementation project(path: ':RouterApi')
    implementation project(path: ':commlib')
    implementation project(path: ':skinmanager')

    annotationProcessor 'androidx.lifecycle:lifecycle-compiler:2.0.0'

    testImplementation 'org.ow2.asm:asm:7.2-beta'
    testImplementation 'org.ow2.asm:asm-commons:7.2-beta'

//    // 仅用 ViewModel
//    implementation "android.arch.lifecycle:viewmodel:$lifecycle_version"
//    // 仅用 LiveData
//    implementation "android.arch.lifecycle:livedata:$lifecycle_version"
//    //  仅仅支持Lifecycle, 不包含LifeModel和LiveData
//    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
//
//    annotationProcessor "android.arch.lifecycle:compiler:$lifecycle_version"
//    // 如果用的是java8使用以下的依赖
//    implementation "android.arch.lifecycle:common-java8:$lifecycle_version"
//
//    // LiveData 的 ReactiveStreams插件
//    implementation "android.arch.lifecycle:reactivestreams:$lifecycle_version"
//
//    // LiveData测试
//    testImplementation "android.arch.core:core-testing:$lifecycle_version"
}
